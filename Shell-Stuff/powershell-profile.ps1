function prompt {
# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
# START KALI CONFIG VARIABLES
$PROMPT_ALTERNATIVE='twoline'
$NEWLINE_BEFORE_PROMPT='yes'
# STOP KALI CONFIG VARIABLES

  $esc = [char]27
  $bell = [char]7
  $bold = "$esc[1m"
  $reset = "$esc[0m"
  If ($NEWLINE_BEFORE_PROMPT -eq 'yes') { Write-Host }
  If ($PROMPT_ALTERNATIVE -eq 'twoline') {
    Write-Host "┌──(" -NoNewLine -ForegroundColor Blue
    Write-Host "${bold}$([environment]::username)㉿$([system.environment]::MachineName)${reset}" -NoNewLine -ForegroundColor Magenta
    Write-Host ")-[" -NoNewLine -ForegroundColor Blue
    Write-Host "${bold}$(Get-Location)${reset}" -NoNewLine -ForegroundColor White
    Write-Host "]" -ForegroundColor Blue
    Write-Host "└─" -NoNewLine -ForegroundColor Blue
    Write-Host "${bold}PS>${reset}" -NoNewLine -ForegroundColor Blue
  } Else {
    Write-Host "${bold}PS " -NoNewLine -ForegroundColor Blue
    Write-Host "$([environment]::username)@$([system.environment]::MachineName) " -NoNewLine -ForegroundColor Magenta
    Write-Host "$(Get-Location)>${reset}" -NoNewLine -ForegroundColor Blue
  }
  # Terminal title
  Write-Host "${esc}]0;PS> $([environment]::username)@$([system.environment]::MachineName): $(Get-Location)${bell}" -NoNewLine
  return " "
}

function penteston {
    param (
        [Parameter(Mandatory = $false)]
        [string]$targetIP
    )

    # Determine the location of .zshrc based on $ZDOTDIR or default to $HOME
    if ($env:ZDOTDIR) {
        $PROFILE_LOCATION = "$env:ZDOTDIR/.zshrc"
    } else {
        $PROFILE_LOCATION = "$env:HOME/.zshrc"
    }

    # Check if .zshrc exists
    if (-not (Test-Path $PROFILE_LOCATION)) {
        Write-Host "Error: .zshrc not found at $PROFILE_LOCATION. Please create it first."
        return
    }
    
    $zshrcContent = Get-Content $PROFILE_LOCATION

    # Check IP Address if provided
    if ($targetIP) {
        if ($targetIP -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$") {
            $IP = $targetIP
            $env:IP = $IP

            # Update .zshrc
            if ($zshrcContent -match 'export IP=') {
                $zshrcContent = $zshrcContent -replace 'export IP=.*', "export IP=$IP"
            } else {
                Add-Content -Path $PROFILE_LOCATION -Value "export IP=$IP"
            }

            Write-Host "Setting IP variable to $IP"
        } else {
            Write-Host "Error: Invalid IP address format."
            return
        }
    } else {
        Write-Host "No target IP specified. Specify an IP address to set the IP variable."
        Write-Host "Usage: penteston -targetIP <IP>"
        return
    }

    # Retrieve tun0 IP address and set to TUNIP
    $tunIP = (ip -4 addr show tun0 | grep -oP '(?<=inet\s)\d+\.\d+\.\d+\.\d+') -join ''
    if ($tunIP) {
        $TUNIP = $tunIP
        $env:TUNIP = $TUNIP

        # Update .zshrc for TUNIP
        if ($zshrcContent -match 'export TUNIP=') {
            $zshrcContent = $zshrcContent -replace 'export TUNIP=.*', "export TUNIP=$TUNIP"
        } else {
            Add-Content -Path $PROFILE_LOCATION -Value "export TUNIP=$TUNIP"
        }

        Write-Host "Setting TUNIP variable to $TUNIP"
    } else {
        Write-Host "Error: Failed to retrieve tun0 IP address."
    }
}

function pentestoff {
    # Determine the location of .zshrc based on $ZDOTDIR or default to $HOME
    if ($env:ZDOTDIR) {
        $PROFILE_LOCATION = "$env:ZDOTDIR/.zshrc"
    } else {
        $PROFILE_LOCATION = "$env:HOME/.zshrc"
    }

    # Check if .zshrc exists
    if (-not (Test-Path $PROFILE_LOCATION)) {
        Write-Host "Error: .zshrc not found at $PROFILE_LOCATION."
        return
    }

    # Unset session-scoped variables
    Remove-Variable -Name "IP" -Scope Global -ErrorAction SilentlyContinue
    Remove-Variable -Name "TUNIP" -Scope Global -ErrorAction SilentlyContinue

    # Remove variables from .zshrc
    $zshrcContent = Get-Content $PROFILE_LOCATION
    $zshrcContent = $zshrcContent | Where-Object { $_ -notmatch '^export IP=' -and $_ -notmatch '^export TUNIP=' }
    Set-Content -Path $PROFILE_LOCATION -Value $zshrcContent

    Write-Host "Unset IP and TUNIP variables and removed them from $PROFILE_LOCATION"
}

# Check for environment variable $env:IP and set session-scoped variable if it exists
if ($env:IP) {
    $IP = $env:IP
}

# Check for environment variable $env:TUNIP and set session-scoped variable if it exists
if ($env:TUNIP) {
    $TUNIP = $env:TUNIP
}